// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/lib/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  password      String
  createdAt     DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(3)
  collections   Collection[]
  ratingHistory Rating[]
}

model Collection {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  userId           Int
  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime           @updatedAt @db.Timestamptz(3)
  User             User?              @relation(fields: [userId], references: [id])
  CollectionRecipe CollectionRecipe[]
}

model Recipe {
  id               Int                @id @default(autoincrement())
  name             String
  ingredients      String[]
  instructions     String[]
  image            String
  foodId           String             @unique
  Rating           Rating[]
  CollectionRecipe CollectionRecipe[]
}

model CollectionRecipe {
  id           Int        @id @default(autoincrement())
  collectionId Int
  recipeId     Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(3)

  @@unique([collectionId, recipeId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  Recipe    Recipe   @relation(fields: [recipeId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  recipeId  Int
  rating    Int
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@unique([userId, recipeId])
}
